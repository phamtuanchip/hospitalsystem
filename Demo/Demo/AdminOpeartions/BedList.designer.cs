#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demo.AdminOpeartions
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Assignment2")]
	public partial class BedListDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBed(Bed instance);
    partial void UpdateBed(Bed instance);
    partial void DeleteBed(Bed instance);
    #endregion
		
		public BedListDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Assignment2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BedListDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BedListDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BedListDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BedListDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bed> Beds
		{
			get
			{
				return this.GetTable<Bed>();
			}
		}
		
		[Function(Name="dbo.Available_Bed_List")]
		public ISingleResult<Available_Bed_ListResult> Available_Bed_List()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Available_Bed_ListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.update_Bed_List")]
		public int update_Bed_List([Parameter(DbType="VarChar(50)")] string id, [Parameter(DbType="VarChar(50)")] string bedname, [Parameter(DbType="Int")] System.Nullable<int> rate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, bedname, rate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Insert_Bed_Record")]
		public int Insert_Bed_Record([Parameter(DbType="VarChar(50)")] string id, [Parameter(DbType="VarChar(50)")] string name, [Parameter(DbType="Int")] System.Nullable<int> rate, [Parameter(DbType="VarChar(50)")] string bedtype)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, rate, bedtype);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Available_In_Patients")]
		public ISingleResult<Available_In_PatientsResult> Available_In_Patients()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Available_In_PatientsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.In_Patients_Id")]
		public ISingleResult<In_Patients_IdResult> In_Patients_Id([Parameter(DbType="Int")] System.Nullable<int> value)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), value);
			return ((ISingleResult<In_Patients_IdResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Get_In_Patient_Visit_date")]
		public ISingleResult<Get_In_Patient_Visit_dateResult> Get_In_Patient_Visit_date([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<Get_In_Patient_Visit_dateResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Get_BedID_In_Patients")]
		public ISingleResult<Get_BedID_In_PatientsResult> Get_BedID_In_Patients([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<Get_BedID_In_PatientsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Get_Bed_Rate_In_Patients")]
		public ISingleResult<Get_Bed_Rate_In_PatientsResult> Get_Bed_Rate_In_Patients([Parameter(DbType="VarChar(50)")] string bedid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bedid);
			return ((ISingleResult<Get_Bed_Rate_In_PatientsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Get_In_Patient_Name")]
		public ISingleResult<Get_In_Patient_NameResult> Get_In_Patient_Name([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<Get_In_Patient_NameResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Get_Description_In_Patient")]
		public ISingleResult<Get_Description_In_PatientResult> Get_Description_In_Patient([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((ISingleResult<Get_Description_In_PatientResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Update_Patient_In_Vists")]
		public int Update_Patient_In_Vists([Parameter(DbType="Int")] System.Nullable<int> patienttype, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> discharge, [Parameter(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patienttype, discharge, id);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Bed")]
	public partial class Bed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private System.Nullable<int> _PatientId;
		
		private string _BedName;
		
		private int _RatePerDay;
		
		private string _BedType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnPatientIdChanging(System.Nullable<int> value);
    partial void OnPatientIdChanged();
    partial void OnBedNameChanging(string value);
    partial void OnBedNameChanged();
    partial void OnRatePerDayChanging(int value);
    partial void OnRatePerDayChanged();
    partial void OnBedTypeChanging(string value);
    partial void OnBedTypeChanged();
    #endregion
		
		public Bed()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PatientId", DbType="Int")]
		public System.Nullable<int> PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[Column(Storage="_BedName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BedName
		{
			get
			{
				return this._BedName;
			}
			set
			{
				if ((this._BedName != value))
				{
					this.OnBedNameChanging(value);
					this.SendPropertyChanging();
					this._BedName = value;
					this.SendPropertyChanged("BedName");
					this.OnBedNameChanged();
				}
			}
		}
		
		[Column(Storage="_RatePerDay", DbType="Int NOT NULL")]
		public int RatePerDay
		{
			get
			{
				return this._RatePerDay;
			}
			set
			{
				if ((this._RatePerDay != value))
				{
					this.OnRatePerDayChanging(value);
					this.SendPropertyChanging();
					this._RatePerDay = value;
					this.SendPropertyChanged("RatePerDay");
					this.OnRatePerDayChanged();
				}
			}
		}
		
		[Column(Storage="_BedType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BedType
		{
			get
			{
				return this._BedType;
			}
			set
			{
				if ((this._BedType != value))
				{
					this.OnBedTypeChanging(value);
					this.SendPropertyChanging();
					this._BedType = value;
					this.SendPropertyChanged("BedType");
					this.OnBedTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class Available_Bed_ListResult
	{
		
		private string _Id;
		
		private string _BedName;
		
		private int _RatePerDay;
		
		private string _BedType;
		
		public Available_Bed_ListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_BedName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BedName
		{
			get
			{
				return this._BedName;
			}
			set
			{
				if ((this._BedName != value))
				{
					this._BedName = value;
				}
			}
		}
		
		[Column(Storage="_RatePerDay", DbType="Int NOT NULL")]
		public int RatePerDay
		{
			get
			{
				return this._RatePerDay;
			}
			set
			{
				if ((this._RatePerDay != value))
				{
					this._RatePerDay = value;
				}
			}
		}
		
		[Column(Storage="_BedType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BedType
		{
			get
			{
				return this._BedType;
			}
			set
			{
				if ((this._BedType != value))
				{
					this._BedType = value;
				}
			}
		}
	}
	
	public partial class Available_In_PatientsResult
	{
		
		private int _PatientId;
		
		private int _PatientType;
		
		private string _BedId;
		
		private int _DoctorId;
		
		private System.DateTime _DateOfVisit;
		
		private System.Nullable<System.DateTime> _DateOfDischarge;
		
		public Available_In_PatientsResult()
		{
		}
		
		[Column(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					this._PatientId = value;
				}
			}
		}
		
		[Column(Storage="_PatientType", DbType="Int NOT NULL")]
		public int PatientType
		{
			get
			{
				return this._PatientType;
			}
			set
			{
				if ((this._PatientType != value))
				{
					this._PatientType = value;
				}
			}
		}
		
		[Column(Storage="_BedId", DbType="VarChar(50)")]
		public string BedId
		{
			get
			{
				return this._BedId;
			}
			set
			{
				if ((this._BedId != value))
				{
					this._BedId = value;
				}
			}
		}
		
		[Column(Storage="_DoctorId", DbType="Int NOT NULL")]
		public int DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					this._DoctorId = value;
				}
			}
		}
		
		[Column(Storage="_DateOfVisit", DbType="Date NOT NULL")]
		public System.DateTime DateOfVisit
		{
			get
			{
				return this._DateOfVisit;
			}
			set
			{
				if ((this._DateOfVisit != value))
				{
					this._DateOfVisit = value;
				}
			}
		}
		
		[Column(Storage="_DateOfDischarge", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfDischarge
		{
			get
			{
				return this._DateOfDischarge;
			}
			set
			{
				if ((this._DateOfDischarge != value))
				{
					this._DateOfDischarge = value;
				}
			}
		}
	}
	
	public partial class In_Patients_IdResult
	{
		
		private int _PatientId;
		
		private int _PatientType;
		
		private string _BedId;
		
		private int _DoctorId;
		
		private System.DateTime _DateOfVisit;
		
		private System.Nullable<System.DateTime> _DateOfDischarge;
		
		public In_Patients_IdResult()
		{
		}
		
		[Column(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					this._PatientId = value;
				}
			}
		}
		
		[Column(Storage="_PatientType", DbType="Int NOT NULL")]
		public int PatientType
		{
			get
			{
				return this._PatientType;
			}
			set
			{
				if ((this._PatientType != value))
				{
					this._PatientType = value;
				}
			}
		}
		
		[Column(Storage="_BedId", DbType="VarChar(50)")]
		public string BedId
		{
			get
			{
				return this._BedId;
			}
			set
			{
				if ((this._BedId != value))
				{
					this._BedId = value;
				}
			}
		}
		
		[Column(Storage="_DoctorId", DbType="Int NOT NULL")]
		public int DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					this._DoctorId = value;
				}
			}
		}
		
		[Column(Storage="_DateOfVisit", DbType="Date NOT NULL")]
		public System.DateTime DateOfVisit
		{
			get
			{
				return this._DateOfVisit;
			}
			set
			{
				if ((this._DateOfVisit != value))
				{
					this._DateOfVisit = value;
				}
			}
		}
		
		[Column(Storage="_DateOfDischarge", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfDischarge
		{
			get
			{
				return this._DateOfDischarge;
			}
			set
			{
				if ((this._DateOfDischarge != value))
				{
					this._DateOfDischarge = value;
				}
			}
		}
	}
	
	public partial class Get_In_Patient_Visit_dateResult
	{
		
		private System.DateTime _DateOfVisit;
		
		public Get_In_Patient_Visit_dateResult()
		{
		}
		
		[Column(Storage="_DateOfVisit", DbType="Date NOT NULL")]
		public System.DateTime DateOfVisit
		{
			get
			{
				return this._DateOfVisit;
			}
			set
			{
				if ((this._DateOfVisit != value))
				{
					this._DateOfVisit = value;
				}
			}
		}
	}
	
	public partial class Get_BedID_In_PatientsResult
	{
		
		private string _BedId;
		
		public Get_BedID_In_PatientsResult()
		{
		}
		
		[Column(Storage="_BedId", DbType="VarChar(50)")]
		public string BedId
		{
			get
			{
				return this._BedId;
			}
			set
			{
				if ((this._BedId != value))
				{
					this._BedId = value;
				}
			}
		}
	}
	
	public partial class Get_Bed_Rate_In_PatientsResult
	{
		
		private int _RatePerDay;
		
		public Get_Bed_Rate_In_PatientsResult()
		{
		}
		
		[Column(Storage="_RatePerDay", DbType="Int NOT NULL")]
		public int RatePerDay
		{
			get
			{
				return this._RatePerDay;
			}
			set
			{
				if ((this._RatePerDay != value))
				{
					this._RatePerDay = value;
				}
			}
		}
	}
	
	public partial class Get_In_Patient_NameResult
	{
		
		private string _Name;
		
		public Get_In_Patient_NameResult()
		{
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class Get_Description_In_PatientResult
	{
		
		private string _Treatment;
		
		public Get_Description_In_PatientResult()
		{
		}
		
		[Column(Storage="_Treatment", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Treatment
		{
			get
			{
				return this._Treatment;
			}
			set
			{
				if ((this._Treatment != value))
				{
					this._Treatment = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
